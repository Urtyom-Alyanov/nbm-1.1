# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CasinoInput {
  fortune: Int!
  summ: Int!
}

type CatModel {
  createdAt: DateTime!
  desc: String
  id: ID!
  img: ID
  name: String!
  products: [ProductModel!]
  updatedAt: DateTime!
}

type CountryModel {
  balance: Float!
  createdAt: DateTime!
  desc: String
  id: ID!
  img: ID
  isPublished: Boolean!
  name: String!
  onlyGov: Boolean!
  orgs: [OrgModel!]!
  updatedAt: DateTime!
  user: UserModel!
}

input CreateCategory {
  desc: String!
  name: String!
}

input CreateInputCountry {
  balance: Int
  imgId: Float
  isPublished: Boolean
  onlyGov: Boolean
  text: String
  title: String!
}

input CreateInputOrg {
  balance: Int
  cId: Int!
  imgId: Float
  isPublished: Boolean
  text: String
  title: String!
}

input CreateInputProduct {
  catId: Int!
  count: Int!
  imgId: Int!
  isPublished: Boolean!
  name: String!
  oId: Int!
  productType: Int!
  sale: Int!
  selfSale: Int!
  text: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteArgs {
  password: String!
  username: String!
}

type DualUserModel {
  user1: UserModel!
  user2: UserModel!
}

input EditCategory {
  desc: String!
  id: Int!
  name: String!
}

input EditInput {
  desc: String
  img: String
  nick: String
}

input EditInputCountry {
  balance: Int
  id: Int!
  imgId: Float
  isPublished: Boolean
  onlyGov: Boolean
  text: String
  title: String!
}

input EditInputOrg {
  balance: Int
  cId: Int!
  id: Int!
  imgId: Float
  isPublished: Boolean
  text: String
  title: String!
}

input EditInputProduct {
  catId: Int!
  id: Int!
  imgId: Int!
  isPublished: Boolean!
  name: String!
  sale: Int!
  text: String!
}

input EditPasswordInput {
  passwordNew1: String!
  passwordNew2: String!
  passwordOld: String!
}

input EditUsernameInput {
  password: String!
  username: String!
}

input LevelInput {
  id: Int
  to: Int
}

type ManyCatModelModel {
  info: ManyInfoModel!
  items: [CatModel]!
}

type ManyCountryModelModel {
  info: ManyInfoModel!
  items: [CountryModel]!
}

type ManyInfoModel {
  limit: Int!
  page: Int!
  summ: Int!
}

type ManyOrgModelModel {
  info: ManyInfoModel!
  items: [OrgModel]!
}

type ManyProductModelModel {
  info: ManyInfoModel!
  items: [ProductModel]!
}

type ManySaleModelModel {
  info: ManyInfoModel!
  items: [SaleModel]!
}

type ManyUserModelModel {
  info: ManyInfoModel!
  items: [UserModel]!
}

type Mutation {
  acceptCountry(id: Float!): StatusModel!
  acceptOrg(id: Float!): StatusModel!
  acceptProduct(id: Float!): StatusModel!
  casino(casinoinput: CasinoInput!): StatusModel!
  createCategory(createCat: CreateCategory!): ReponseCatModelModel!
  createCountry(createCountryArgs: CreateInputCountry!): ReponseCountryModelModel!
  createOrg(createOrgArgs: CreateInputOrg!): ReponseOrgModelModel!
  createProduct(createProductArgs: CreateInputProduct!): ReponseProductModelModel!
  declineCountry(id: Float!): StatusModel!
  declineOrg(id: Float!): StatusModel!
  declineProduct(id: Float!): StatusModel!
  delete(deleteUser: DeleteArgs!): StatusModel!
  deleteAuthCookies: StatusModel!
  deleteCategory(id: Float!): ReponseCatModelModel!
  deleteCountry(id: Float!): StatusModel!
  deleteOrg(id: Float!): StatusModel!
  deleteProduct(id: Float!): StatusModel!
  editCountry(editCountryArgs: EditInputCountry!): ReponseCountryModelModel!
  editOrg(editOrgArgs: EditInputOrg!): ReponseOrgModelModel!
  editPassword(updatePassword: EditPasswordInput!): ReponseUserModelModel!
  editProduct(editProductArgs: EditInputProduct!): ReponseProductModelModel!
  editUser(editUser: EditInput!): ReponseUserModelModel!
  editUsername(updateUsername: EditUsernameInput!): ReponseUserModelModel!
  giftCountry(giftCountryArgs: PayInput!): ReponseCountryModelModel!
  giftOrg(giftOrgArgs: PayInput!): ReponseOrgModelModel!
  giftUser(giftUser: PayInput!): ReponseUserModelModel!
  levelControl(payUser: LevelInput!): ReponseUserModelModel!
  payCountry(payCountryArgs: PayInput!): ReponseCountryModelModel!
  payOrg(payOrgArgs: PayInput!): ReponseOrgModelModel!
  payUser(payUser: PayInput!): DualUserModel!
  penaltyCountry(penaltyCountryArgs: PayInput!): ReponseCountryModelModel!
  penaltyOrg(penaltyOrgArgs: PayInput!): StatusModel!
  penaltyUser(penaltyUser: PayInput!): ReponseUserModelModel!
  productPay(payProduct: PayInput!): ReponseSaleModelModel!
  reg(registerInput: RegisterInput!): TokenItemUser!
  unpayCountry(unpayCountryArgs: PayInput!): ReponseCountryModelModel!
  unpayOrg(unpayOrgArgs: PayInput!): ReponseOrgModelModel!
  updateCategory(editCat: EditCategory!): ReponseCatModelModel!
}

type NotifyModel {
  forId: ID!
  img: String
  isCool: Boolean!
  text: String!
  title: String!
  typ: String!
}

type OrgModel {
  balance: Float!
  country: CountryModel
  createdAt: DateTime!
  desc: String
  id: ID!
  img: ID
  isPublished: Boolean!
  name: String!
  products: [ProductModel!]
  updatedAt: DateTime!
  user: UserModel!
}

input PayInput {
  id: Int
  summ: Int
}

type ProductModel {
  category: CatModel
  count: Int
  createdAt: DateTime!
  desc: String
  id: ID!
  img: ID
  isPublished: Boolean!
  name: String!
  org: OrgModel!
  productType: Int!
  sale: Int!
  sales: [SaleModel!]!
  selfSale: Int
  updatedAt: DateTime!
}

type Query {
  findAllCountry(limit: Int = 12, page: Int = 1): ManyCountryModelModel!
  findAllOrg(cId: Int, limit: Int = 12, page: Int = 1, uId: Int): ManyOrgModelModel!
  findAllProduct(catId: Int!, limit: Int = 12, oId: Int!, page: Int = 1): ManyProductModelModel!
  findAllUser(limit: Int = 12, page: Int = 1): ManyUserModelModel!
  findCountry(id: Int, oId: Int, uId: Int): ReponseCountryModelModel!
  findManyCategory(limit: Int = 12, page: Int = 1): ManyCatModelModel!
  findNotAcceptedCountry(limit: Int = 12, page: Int = 1): ManyCountryModelModel!
  findNotAcceptedOrg(cId: Int, limit: Int = 12, page: Int = 1, uId: Int): ManyOrgModelModel!
  findNotAcceptedProduct(catId: Int!, limit: Int = 12, oId: Int!, page: Int = 1): ManyProductModelModel!
  findOneCategory(id: Int!, pId: Int!): ReponseCatModelModel!
  findOneOrg(id: Int!, pId: Int): ReponseOrgModelModel!
  findOneProduct(id: Int!, sId: Int!): ReponseProductModelModel!
  findUser(articleId: Int, countryId: Int, id: Int, orgId: Int, username: String, vkId: Int): ReponseUserModelModel!
  login(enableCookie: Boolean, password: String, username: String, vkHash: String, vkId: Int): TokenItemUser!
  refresh(enableCookies: Boolean!, refresh: String!): TokenItemUser!
  saleFindAll(limit: Int = 12, page: Int = 1, productId: Int, userId: Int): ManySaleModelModel!
  saleFindOne(id: Int!, pId: Int!): ReponseSaleModelModel!
  whoIAm: ReponseUserModelModel!
}

input RegisterInput {
  desc: String
  enableCookie: Boolean
  img: String
  nick: String
  password: String!
  passwordRetry: String!
  username: String!
  vkHash: String!
  vkId: Int!
}

type ReponseCatModelModel {
  item: CatModel!
}

type ReponseCountryModelModel {
  item: CountryModel!
}

type ReponseOrgModelModel {
  item: OrgModel!
}

type ReponseProductModelModel {
  item: ProductModel!
}

type ReponseSaleModelModel {
  item: SaleModel!
}

type ReponseUserModelModel {
  item: UserModel!
}

type SaleModel {
  createdAt: DateTime!
  desc: String
  id: ID!
  img: ID
  items: Int!
  product: ProductModel!
  updatedAt: DateTime!
  user: UserModel!
}

type StatusModel {
  isOk: Boolean!
}

type Subscription {
  subEvent: NotifyModel!
}

type TokenItemUser {
  item: UserModel!
  token: TokenModel!
}

type TokenModel {
  access_token: String!
  refresh_token: String!
}

type UserModel {
  balance: Int!
  countr: CountryModel
  createdAt: DateTime!
  desc: String
  id: ID!
  img: ID
  levelAccess: Int!
  nick: String
  orgs: [OrgModel!]
  sales: [SaleModel!]
  updatedAt: DateTime!
  username: String!
  vkId: Int
}
